{
open Parser

exception UnknownToken of char
}

let digit = ['0'-'9']
let char = ['a'-'z' 'A'-'Z']

rule token = parse
	| [' ' '\t' '\r' '\n' ] { token lexbuf }
	| ";;"  	{ EOL }
	| ';'  		{ SEQ }
	| "skip"  	{ SKIP }
	| "if"  	{ IF }
	| "then"  	{ THEN }
	| "else"  	{ ELSE }
	| "while"  	{ WHILE }
	| "do"  	{ DO }
	| '{'  		{ CLPAR }
	| '}'  		{ CRPAR }
	| "free"  	{ FREE }
	| '=''  	{ ASSIGN }
	| "=="  	{ EQUAL }
	| '+'  		{ PLUS }
	| '-'  		{ MINUS }
	| '*'  		{ MULT }
	| '/'  		{ DIV }
	| '('  		{ LPAR }
	| ')'  		{ RPAR }
	| "not"  	{ NOT }
	| '!'  		{ DEREF }
	| "decl" 	{ DECL }
	| "in"  	{ IN }
	| "fun"  	{ FUN }
	| ':'  		{ TYPEOF }
	|  "->" 	{ ARROW }
	|  "bool" 	{ BOOLTYPE }
	|  "int" 	{ INTTYPE }
	|  "none" 	{ NONETYPE }
	|  "ref" 	{ REFTYPE }
	|  "" { UNITTYPE }
	| digit+ as num { INT (int_of_string num) }
	| char (char | digit)* as word { NAME word }
	| '"' (char|digit)* '"' as s { STRING s }
	| _ as tk { raise (Failure(string_of_char tk)) }
	| eof { raise End_of_file }