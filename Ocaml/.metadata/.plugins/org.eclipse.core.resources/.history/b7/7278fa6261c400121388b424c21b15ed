

(******************************************************************

	José Filipe Sá Pinto Torres
	jftorres29@gmail.com

	LEI - FCT/UNL - Maio 2013


*******************************************************************)

(*******************************************************************

     #####                                            
    #     # #####    ##   #    # #    #   ##   #####  
    #       #    #  #  #  ##  ## ##  ##  #  #  #    # 
    #  #### #    # #    # # ## # # ## # #    # #    # 
    #     # #####  ###### #    # #    # ###### #####  
    #     # #   #  #    # #    # #    # #    # #   #  
     #####  #    # #    # #    # #    # #    # #    # 
                                                      

*******************************************************************)


type ctype = 
	| IntType
	| BoolType
	| RefType of ctype
	| UnitType
	| None

type loc = int

type value = 
	| Num of int
	| Ref of loc
	| Bool of bool

type calcst = 
	| Number of int 
	| Add of calcst * calcst
	| Sub of calcst * calcst 
	| Mul of calcst * calcst 
	| Div of calcst * calcst 
	| Id of string * ctype
	| Decl of string * calcst * calcst * ctype
	| Var of calcst * ctype
	| Deref of calcst * ctype
	| Assign of calcst * calcst * ctype
	| Free of calcst
	| If of calcst * calcst * calcst * ctype
	| While of calcst  * calcst
	| Seq of  calcst * calcst
	| Skip
	| Eq of calcst * calcst
	| Not of calcst
	| Fun of string * ctype * calcst
	| Call of calcst * calcst 


(*******************************************************************

      #####   #######  #     #  #######  ####### 
     #     #     #     #     #  #        #       
     #           #     #     #  #        #       
      #####      #     #     #  #####    #####   
           #     #     #     #  #        #       
     #     #     #     #     #  #        #       
      #####      #      #####   #        #       
                                                 

*******************************************************************)


type binop_type = Op_add | Op_sub | Op_mul | Op_div | Op_lt

let id_counter = ref(0);;

let newid = (incr id_counter) ;; "v"^(string_of_int !id_counter)

exception SyntaxError of string * string


(** Operações de cast **)

let toNum e = 
	match e with
	| Num(n) -> n 
	| _ -> raise (Failure("Not a number"))


(** funções de manipulação do ambiente **)

let rec find e env = 
	match env with
		| (x,v)::t -> if x=e then v else find e t
		| _ -> raise (Failure ("Not found: "^e)) 


let assoc x v env = (x,v)::env

(** funções de manipulação da memória **)

let newloc m = 0 

let rec getloc l m =
	match m with
	| (i,v)::t -> if l=i then v else getloc l t
	| [] -> raise (Failure("not found"))

let rec setloc nv l m =
	match m with
	| (i,v)::t -> if i=l then (i,nv)::t else (i,v)::(setloc nv l t)
	| _ -> raise (Failure("not found setloc"))
		

let rec string_of_type t =
	match t with
	| IntType -> "int"
	| BoolType -> "bool"
	| RefType(ctype) -> "ref("^(string_of_type ctype)^")" 
	| UnitType -> "unit"
	| None -> "none"


let string_of_result e = 
	match e with
	| Num(n) -> string_of_int n
	| Ref(n) -> "Ref("^(string_of_int n)^")"
	| Bool(b) -> string_of_bool b

let rec print_list l =
	match l with
	| a::t -> a^"\n"^(print_list t)
	| [] -> ""


(*******************************************************************

     #     #                                                 
     #     #  #    #  #####     ##    #####    ####   ###### 
     #     #  ##   #  #    #   #  #   #    #  #       #      
     #     #  # #  #  #    #  #    #  #    #   ####   #####  
     #     #  #  # #  #####   ######  #####        #  #      
     #     #  #   ##  #       #    #  #   #   #    #  #      
      #####   #    #  #       #    #  #    #   ####   ###### 
                                                             

*******************************************************************)


(**funções semânticas **)

let rec unparse a ident =
	let ni = ident^"  " in
	match a with
		| Number n -> ident^(string_of_int n)
		| Add (l,r) -> ident ^ "Add\n"^(unparse l ni)^"\n"^(unparse r ni)
		| Sub (l,r) -> ident ^ "Sub\n"^(unparse l ni)^"\n"^(unparse r ni)
		| Mul (l,r) -> ident ^ "Mul\n"^(unparse l ni)^"\n"^(unparse r ni)
		| Div (l,r) -> ident ^ "Div\n"^(unparse l ni)^"\n"^(unparse r ni)
		| Id (x,t) -> ident ^ x^":"^(string_of_type t)
		| Decl (x,e1,e2,t) -> ident ^ x^" = "^(unparse e1 ni)^" in \n( "^(unparse e2 ni)^"\n }"
		| Var (x,t) -> ident ^ "Var("^(unparse x ni)^":"^string_of_type t^")"
		| Deref (x,t) -> ident ^ " !("^(unparse x ni)^":"^string_of_type t^")"
		| Assign (x,v,t) -> ident ^ (unparse x ni)^":=("^(unparse v ni)^")"
		| Free (x) -> ident ^ "Free("^(unparse x ni)^")"
		| If (c,i,e,t) -> ident ^ "If("^(unparse c ni)^","^(unparse i ni)^","^(unparse e ni)^"):"^(string_of_type t)
		| While (c,e) -> ident ^ "While("^(unparse c ni)^","^(unparse e ni)^")"
		| Seq (e1,e2) -> ident ^ "Seq("^(unparse e1 ni)^","^(unparse e2 ni)^")"
		| Skip -> ident ^ "Skip"
		| Eq (e1,e2) -> ident ^ "( "^(unparse e1 ni)^" == "^(unparse e2 ni)^" )"
		| Not (e1) -> ident ^ "Not( "^(unparse e1 ni)^" )"
		| Fun (s,t,e1) -> ident ^ "Fun("^s^":"^(string_of_type t)^","^(unparse e1 ni)^")"
		| Call (e1,e2) -> ident ^ "Call("^(unparse e1 ni)^","^(unparse e2 ni)^")"

(*******************************************************************

     #######  ######   #######  ####### 
     #        #     #  #        #       
     #        #     #  #        #       
     #####    ######   #####    #####   
     #        #   #    #        #       
     #        #    #   #        #       
     #        #     #  #######  ####### 
                                        

*******************************************************************)


(** este free pode devolver duplicados, mas não deve haver problema com isso **)
let rec free e =
	match e with
		| Number n -> []
		| Add (l,r) -> (free l)@(free r)
		| Sub (l,r) -> (free l)@(free r)
		| Mul (l,r) -> (free l)@(free r)
		| Div (l,r) -> (free l)@(free r)
		| Id (x,t) -> [x]	
		| Decl (x,e1,e2,t) -> (free e1)@(List.filter (fun a -> a <> x) (free e2))
		| Var (x,t) -> []
		| Deref (x,t) -> []
		| Assign (x,v,t) -> []
		| Free (x) -> []
		| If (c,i,e,t) -> []
		| While (c,e) -> []
		| Seq (e1,e2) -> []
		| Skip -> []
		| Eq (e1,e2) -> []
		| Not (e1) -> []
		| Fun (s,t,e1) -> []
		| Call (e1,e2) -> []


(*******************************************************************

     #######                                                                
        #     #   #  #####   ######   ####   #    #  ######   ####   #    # 
        #      # #   #    #  #       #    #  #    #  #       #    #  #   #  
        #       #    #    #  #####   #       ######  #####   #       ####   
        #       #    #####   #       #       #    #  #       #       #  #   
        #       #    #       #       #    #  #    #  #       #    #  #   #  
        #       #    #       ######   ####   #    #  ######   ####   #    # 
                                                                            

*******************************************************************)


let rec typecheck e env = 
	match e with
		| Number n -> IntType
		| Add (l,r) -> IntType
		| Sub (l,r) -> IntType
		| Mul (l,r) -> IntType
		| Div (l,r) -> IntType
		| Id (x,t) -> IntType
		| Decl (x,e1,e2,t) -> IntType
		| Var (x,t) -> IntType
		| Deref (x,t) -> IntType
		| Assign (x,v,t) -> IntType
		| Free (x) -> IntType
		| If (c,i,e,t) -> IntType
		| While (c,e) -> IntType
		| Seq (e1,e2) -> IntType
		| Skip -> IntType
		| Eq (e1,e2) -> IntType
		| Not (e1) -> IntType
		| Fun (s,t,e1) -> IntType
		| Call (e1,e2) -> IntType


(*******************************************************************

         #######  #     #     #     #       
         #        #     #    # #    #       
         #        #     #   #   #   #       
         #####    #     #  #     #  #       
         #         #   #   #######  #       
         #          # #    #     #  #       
         #######     #     #     #  ####### 
                                            
*******************************************************************)


(** usando ambientes **)
let rec eval e env = 
	match e with
		| Number n -> Num(n)
		| Add (l,r) -> Num(toNum((eval l env))+toNum((eval r env)))
		| Sub (l,r) -> Num(toNum((eval l env))-toNum((eval r env)))
		| Mul (l,r) -> Num(toNum((eval l env))*toNum((eval r env)))
		| Div (l,r) -> let v = toNum((eval r env)) in if v=0 then raise (Failure ("Division by Zero")) else Num(toNum((eval l env))/v)
		| Id (x,t) -> find x env
		| Decl (x,e1,e2,t) ->
			let v = eval e1 env in
				let nenv = (x,v)::env in
					eval e2 nenv
		| Var (x,t) -> Num(0)
		| Deref (x,t) -> Num(0)
		| Assign (x,v,t) -> Num(0)
		| Free (x) -> Num(0)
		| If (c,i,e,t) -> Num(0)
		| While (c,e) -> Num(0)
		| Seq (e1,e2) -> Num(0)
		| Skip -> Num(0)
		| Eq (e1,e2) -> Num(0)
		| Not (e1) -> Num(0)
		| Fun (s,t,e1) -> Num(0)
		| Call (e1,e2) -> Num(0)



(***********************************************************************

          #####   #######  #######       #####   #######  #     #  ######  
         #     #  #           #         #     #  #     #  ##   ##  #     # 
         #        #           #         #        #     #  # # # #  #     # 
          #####   #####       #         #        #     #  #  #  #  ######  
               #  #           #         #        #     #  #     #  #       
         #     #  #           #         #     #  #     #  #     #  #       
          #####   #######     #          #####   #######  #     #  #       
                                                                           

***********************************************************************)

type dest = 
	Reg of int 
  | I32 of int

type label = 
	LabelT of int 
  | LabelS of string

type op = 
    Add_i32 of dest * dest * dest
  | Sub_i32 of dest * dest * dest
  | Mul_i32 of dest * dest * dest
  | Div_i32 of dest * dest * dest
  | New_var of ctype * dest * dest
  | Set_var of ctype * dest * dest
  | Get_var of ctype * dest * dest
  | Free_var of dest
  | Phi of ctype * dest * dest * label * dest * label
  | Eq_i32 of dest * dest * dest
  | Not_i1 of dest * dest

type block = 
	| IBlock of label * op list * label (* Bloco incondicional. Têm a label de início, o código (op list) e a label de destino no fim do processo*)
	| CBlock of label * op list * (dest * label * label) (* bloco condicional - Tem uma label de inicio, o código, uma condição e duas labels *)

let dest2Str e = 
	match e with
	| I32 n -> (string_of_int n)
	| Reg n -> "%"^(string_of_int n)

let label2Str l =
	match l with
	| LabelT n -> "bb"^(string_of_int n)
	| LabelS s -> s
 
let op2Str e = 
	match e with
 | Add_i32 (d1,d2,d3) -> "  "^(dest2Str d1)^" = add i32 "^(dest2Str d2)^", "^(dest2Str d3)
 | Sub_i32 (d1,d2,d3) -> "  "^(dest2Str d1)^" = sub i32 "^(dest2Str d2)^", "^(dest2Str d3)
 | Mul_i32 (d1,d2,d3) -> "  "^(dest2Str d1)^" = mul i32 "^(dest2Str d2)^", "^(dest2Str d3)
 | Div_i32 (d1,d2,d3) -> "  "^(dest2Str d1)^" = sdiv i32 "^(dest2Str d2)^", "^(dest2Str d3)
 | New_var (IntType,d',d'')    -> "  "^(dest2Str d')^" = call %struct.var_type* @int_var_create(i32 "^(dest2Str d'')^") nounwind ssp "
 | New_var ((RefType _),d',d'') -> ""^(dest2Str d')^" = call %struct.var_type* @var_var_create(%struct.var_type* "^(dest2Str d'')^") nounwind ssp "
 | New_var ((BoolType),d',d'') -> "New bool"
 | New_var ((UnitType),d',d'') -> "New unit"
 | New_var ((None),d',d'') -> "New none"
 | Set_var (IntType,d',d'')    -> " "^"call void @int_set_var(%struct.var_type* "^(dest2Str d')^", i32 "^(dest2Str d'')^") nounwind ssp"
 | Set_var ((RefType _),d',d'') -> " "^"call void @var_set_var(%struct.var_type* "^(dest2Str d')^", %struct.var_type* "^(dest2Str d'')^") nounwind ssp"
 | Set_var ((BoolType),d',d'') -> "Set bool"
 | Set_var ((UnitType),d',d'') -> "Set unit"
 | Set_var ((None),d',d'') -> "Set none"
 | Get_var (IntType,d',d'')    -> " "^(dest2Str d')^" = call i32 @int_get_var(%struct.var_type* "^(dest2Str d'')^") nounwind ssp "
 | Get_var ((RefType _),d',d'') -> " "^(dest2Str d')^" = call %struct.var_type* @int_get_var(%struct.var_type* "^(dest2Str d'')^") nounwind ssp "
 | Get_var ((BoolType),d',d'') -> "Get bool"
 | Get_var ((UnitType),d',d'') -> "Get unit"
 | Get_var ((None),d',d'') -> "Get none"
 | Free_var (d) -> "  call void @free_var(%struct.var_type* "^(dest2Str d)^") nounwind ssp "
 | Phi (IntType,d,d',l',d'',l'') -> "  "^(dest2Str d)^" = phi i32 ["^(dest2Str d')^", %"^(label2Str l')^"], ["^(dest2Str d'')^", %"^label2Str l''^"]"
 | Phi (RefType _,d,d',l',d'',l'') -> "Phi bool"
 | Phi (BoolType,d,d',l',d'',l'') -> "Phi bool"
 | Phi (UnitType,d,d',l',d'',l'') -> "Phi unit"
 | Phi (None,d,d',l',d'',l'') -> "Phi none"
 | Not_i1 (d,d') -> "  "^(dest2Str d)^" = xor i1 1, "^(dest2Str d')
 | Eq_i32 (d,d',d'') -> "  "^(dest2Str d)^" = icmp eq i32 "^(dest2Str d')^", "^(dest2Str d'')

let main_header = 
       "@.str = private constant [4 x i8] c\"%d\\0A\\00\", align 1 ; "^
       "<[4 x i8]*> [#uses=1]\n"^
       "\n"^
       "%struct.var_type = type { i32, %union.anon }\n"^
       "%union.anon = type { %struct.var_type* }\n"^
       "\n"^
       "define i32 @main() nounwind {\n"

let main_footer dest lend = 
       (label2Str) lend ^ ":\n"^
       "  call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([4 x i8]* "^
       "@.str, i64 0, i64 0), i32 "^ (dest2Str dest) ^
       ") nounwind ; <i32> [#uses=0]\n"^
       "  ret i32 0\n"^
       "}\n"^
       "\n"^
       "declare i32 @printf(i8*, ...) nounwind\n"^
       "declare %struct.var_type* @int_var_create(i32)\n"^
       "declare %struct.var_type* @var_var_create(%struct.var_type*)\n"^
       "declare i32 @int_get_var(%struct.var_type*)\n"^
       "declare %struct.var_type* @var_get_var(%struct.var_type*)\n"^
       "declare void @int_set_var(%struct.var_type*, i32)\n"^
       "declare void @var_set_var(%struct.var_type*, %struct.var_type*)\n"^
       "declare void @free_var(%struct.var_type*, %struct.var_type*)\n"

let block2Str b = 
	match b with
	| IBlock (l,ops,l') -> 
          (label2Str l) ^ ":\n" ^ let x =  List.map (function o -> op2Str o) ops in
          print_list x ^
          "  br label %"^ (label2Str l')
	| CBlock (l,ops,(d,l',l'')) -> 
          (label2Str l) ^ ":\n" ^ 
          let x =  List.map (function o -> op2Str o) ops in
          print_list x ^
          "  br i1 "^ (dest2Str d) ^", label %"^ (label2Str l')^", label %"^ (label2Str l'')

let dump (bs,d,lend) = (main_header) ^ let x = List.map (function b->((block2Str b)^"\n")) bs in print_list x ^ (main_footer d lend)

let labelref = ref(-1);;
let newlabel () = incr labelref ; LabelT(!labelref);;

let refref = ref(-1);;
let newreg () = incr refref; Reg(!refref);;

(*******************************************************************

      #####                                                     
     #     #   ####   #    #  #####   #  #       ######  #####  
     #        #    #  ##  ##  #    #  #  #       #       #    # 
     #        #    #  # ## #  #    #  #  #       #####   #    # 
     #        #    #  #    #  #####   #  #       #       #####  
     #     #  #    #  #    #  #       #  #       #       #   #  
      #####    ####   #    #  #       #  ######  ######  #    # 
                                                                                                                           

*******************************************************************)


let rec comp program env (start,lend) = 
	match program with

		| Number n -> 
			([],I32 n,start)
		
		| Add (l,r) ->
			let m1 = newlabel () in
			let m2 = newlabel () in
			let (code1,d1,m1) = comp l env (start,m1) in
			let (code2,d2,m2) = comp r env (m1,m2) in
			let reg = newreg () in 
				(List.concat [ code1; code2; [ IBlock (m2, [Add_i32(reg,d1,d2)],lend)]], reg, lend)
		
		| Sub (l,r) ->	
		let m1 = newlabel () in
			let m2 = newlabel () in
			let (code1,d1,m1) = comp l env (start,m1) in
			let (code2,d2,m2) = comp r env (m1,m2) in
			let reg = newreg () in 
				(List.concat [ code1; code2; [ IBlock (m2, [Sub_i32(reg,d1,d2)], lend) ] ], reg, lend)

		| Mul (l,r) -> 
			let m1 = newlabel () in
			let m2 = newlabel () in
			let (code1,d1,m1) = comp l env (start,m1) in
			let (code2,d2,m2) = comp r env (m1,m2) in
			let reg = newreg () in 
				(List.concat [ code1; code2; [ IBlock (m2, [Mul_i32(reg,d1,d2)], lend) ] ], reg, lend)
		
		| Div (l,r) -> 
			let m1 = newlabel () in
			let m2 = newlabel () in
			let (code1,d1,m1) = comp l env (start,m1) in
			let (code2,d2,m2) = comp r env (m1,m2) in
			let reg = newreg () in 
				(List.concat [ code1; code2; [ IBlock (m2, [Div_i32(reg,d1,d2)], lend) ] ], reg, lend)
		
		| Id (x,t) ->
			let v = find x env in
			([],v,start)
		
		| Decl (x,e1,e2,t) -> 
			let m1 = newlabel() in
			let (code1,d1,m1) = comp e1 env (start, m1) in
			let (code2,d2,lend) = comp e2 ((x,d1)::env) (m1,lend) in
			(List.concat [code1;code2],d2,lend)
		
		| Var (e1,t) -> 
			let m1 = newlabel() in
			let (code1,d1,m1) = comp e1 env (start,m1) in
			let d2 = newreg() in
			(List.concat [code1; [IBlock(m1,[New_var(t,d2,d1)],lend)] ] ,d2,lend)
		
		| Deref (e1,t) -> 
			let m1 = newlabel() in
			let (code1,d1,m1) = comp e1 env (start,m1) in
			let d2 = newreg() in
			(List.concat [code1; [IBlock( m1 , [Get_var(t,d2,d1)] , lend )] ] , d2 , lend)
		
		| Assign (e1,e2,t) ->
			let m1 = newlabel() in
			let m2 = newlabel() in
			let (code1,d1,m1) = comp e1 env (start,m1) in
			let (code2,d2,m2) = comp e2 env (m1,m2) in
			( List.concat [ code1; code2; [ IBlock( m2, [Set_var(t,d1,d2)] , lend ) ] ] , d2 , lend )
		
		| Free (e1) ->
			let m1 = newlabel() in
			let (code1,d1,m1) = comp e1 env (start,m1) in
			( List.concat [code1; [ IBlock( m1 , [Free_var d1] , lend ) ] ] , d1, lend)
		
		| If (e_c,e_t,e_e,t) -> 
			let l_cond = newlabel() in
	     	let l_then = newlabel() in
		    let l_else = newlabel() in
		    let l_then_exit = newlabel() in
		    let l_else_exit = newlabel() in
		    let l_exit = newlabel() in
		    let d4 = newreg() in
		    let (code1,d1, l_cond) = comp e_c env (start,l_cond) in
		    let (code2,d2,l_then_exit) = comp e_t env (l_then,l_then_exit) in
		    let (code3,d3,l_else_exit) = comp e_e env (l_else,l_else_exit) in
		    let all_bs = List.concat [ code1 ; code2 ; code3 ;
		           [CBlock(l_cond,[],(d1,l_then,l_else))] ;
		           [IBlock(l_then_exit,[],l_exit)];
		           [IBlock(l_else_exit,[],l_exit)]; 
		           [IBlock(l_exit,[Phi(t,d4,d2,l_then_exit,d3,l_else_exit)],lend)]] in 
		        (all_bs, d4, lend)
		
		| While (c,e) -> 
			let l_cond = newlabel() in
			let l_body = newlabel() in
			let l_exit = newlabel() in 
			let (code1, d1,l_cond) = comp c env (start,l_cond) in
			let (code2, d2,l_exit) = comp e env (l_body,l_exit) in
			( List.concat [ code1 ; code2 ; [ CBlock( l_cond, [] , ( d1 ,l_body ,lend ) ) ; IBlock( l_exit, [], start ) ] ] , d2, lend)
		
		| Seq (e1,e2) -> 
			let m1 = newlabel() in
			let (code1,d1,m1) = comp e1 env (start,m1) in
			let (code2,d2,lend) = comp e2 env (m1,lend) in
			(List.concat [code1;code2] , d2, lend)

		| Skip -> ([],I32 0,start)
		
		| Eq (e,e') -> 
			let m1 = newlabel() in
			let m2 = newlabel() in
			let (code1,d,m1) = comp e env (start,m1) in
			let (code2,d',m2) = comp e' env (m1,m2)  in
			let d'' = newreg() in
				( List.concat [ code1; code2;  [IBlock( m2, [ Eq_i32( d'' , d , d' ) ], lend) ] ], d'',lend)

		| Not (e) ->
			let m = newlabel() in
			let (code,d,m) = comp e env (start,m) in
			let d' = newreg() in
				( List.concat [code; [ IBlock( m, [ Not_i1( d' , d ) ], lend) ] ], d',lend)

		| Fun (s,t,e1) -> ([],I32 0,start)
		
		| Call (e1,e2) -> ([],I32 0,start)


(*******************************************************************

         #######  #     #  #######   #####  
         #         #   #   #        #     # 
         #          # #    #        #       
         #####       #     #####    #       
         #          # #    #        #       
         #         #   #   #        #     # 
         #######  #     #  #######   #####  
                                            
                            
*******************************************************************)

(** funções para imprimir o resultado das semânticas **)

let unparse_cmd e = unparse e ""

let free_cmd e = "free: "^print_list (free e)

let typecheck_cmd e = "typecheck: "^string_of_type(typecheck e [])

let eval_cmd e = "eval: "^(string_of_result (eval e []))

let comp_cmd e = 
	let result = comp e [] (LabelS "entry", LabelS "result") in 
		match result with
		| (bs,d,lend) -> dump(bs,d,lend)
















