%{
open Syntax

let parse_error s = 
  print_endline s;
  flush stdout
	
let string_of_position p =
	(string_of_int p.Lexing.pos_lnum) ^":" ^ (string_of_int p.Lexing.pos_cnum)

let raiseError () = 
	let p1 = (Parsing.rhs_start_pos 1) in 
  let p2 = (Parsing.symbol_end_pos()) in
	Parsing.clear_parser ();
  raise (SyntaxError(string_of_position p1, string_of_position p2))

%}


%token EOL
%token <int> INT
%token <string> STRING
%token <string> NAME
%token DECL EQ IN END
%token FUN IS CALL
%token IF THEN ELSE 
%token SEQ
%token WHILE
%token DEREF VAR FREE ASSIGN
%token EQUAL NOT 
%token PLUS MINUS MULT DIV 
%token LPAR RPAR 


%start main

%type <Syntax.calcst> main

%% /* Grammar rules */

main: 
  statements EOL { $1 }
;
 

statements:
    statements stat { Seq($1,$2) } 
  | stat { $1 }
;

stat:
   "skip" { Skip }
  | "if" '(' expression "):" ctype block "else" block { If ($3,$6,$8,$5) }
  | "while" '(' expression ')' block { While ($3,$5) }
  |  expression ';' { $1 }
;

expression:
    ctype factor "=" expression { Assign ($2,$4,$1) }
  | expression  {$1 }
;

block:
  '{' statements '}' { $2 }
;

expression:
    NAME ':' ctype { Id($1,$3) } 
  | "free" expression { Free ($2) }
  | eq { $1 }
  ;

eq:
    sum "==" sum { Eq ($1,$3) }
  | sum { $1 }
;

sum:
    sum '+' term { Add ($1,$3) }
  | sum '-' term { Sub ($1,$3) }
  | term { $1 }
;

term:
    term '*' op { Mul ($1,$3) }
  | term '/' op { Div ($1,$3) }
  | op { $1 }
;

op:
     factor '(' expression ')' { Call ($1,$3) }
   | "not" factor   { Not ($2) }
   | ctype '!' factor { Deref ($3,$1) }
   | factor { $1 }
  ;

factor:
    ctype NAME '=' expression "in" block { Decl ($2,$4,$6,$1) }
  | ctype "fun" STRING '{' statements '}' { Fun ($3,$1,$5) }
  | INT { Number($1) }
  | STRING { $1 }
  | '(' expression ')' { $2 }
;

ctype: 
  | "int" { IntType }
  | "bool" { BoolType }
	| "unit" { UnitType }
	| "none" { NoneType }
;