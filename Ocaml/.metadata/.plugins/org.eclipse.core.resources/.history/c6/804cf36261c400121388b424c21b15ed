type token =
  | EOL
  | INT of (int)
  | STRING of (string)
  | NAME of (string)
  | DECL
  | IN
  | FUN
  | CALL
  | IF
  | THEN
  | ELSE
  | WHILE
  | SKIP
  | SEQ
  | DEREF
  | VAR
  | FREE
  | ASSIGN
  | EQUAL
  | NOT
  | PLUS
  | MINUS
  | MULT
  | DIV
  | LPAR
  | RPAR
  | TYPEOF
  | CLPAR
  | CRPAR
  | UNITTYPE
  | INTTYPE
  | BOOLTYPE
  | NONETYPE
  | REFTYPE

open Parsing;;
let _ = parse_error;;
# 1 "parser.mly"

open Syntax

let parse_error s = 
  print_endline s;
  flush stdout
	
let string_of_position p =
	(string_of_int p.Lexing.pos_lnum) ^":" ^ (string_of_int p.Lexing.pos_cnum)

let raiseError () = 
	let p1 = (Parsing.rhs_start_pos 1) in 
  let p2 = (Parsing.symbol_end_pos()) in
	Parsing.clear_parser ();
  raise (SyntaxError(string_of_position p1, string_of_position p2))

# 57 "parser.ml"
let yytransl_const = [|
  257 (* EOL *);
  261 (* DECL *);
  262 (* IN *);
  263 (* FUN *);
  264 (* CALL *);
  265 (* IF *);
  266 (* THEN *);
  267 (* ELSE *);
  268 (* WHILE *);
  269 (* SKIP *);
  270 (* SEQ *);
  271 (* DEREF *);
  272 (* VAR *);
  273 (* FREE *);
  274 (* ASSIGN *);
  275 (* EQUAL *);
  276 (* NOT *);
  277 (* PLUS *);
  278 (* MINUS *);
  279 (* MULT *);
  280 (* DIV *);
  281 (* LPAR *);
  282 (* RPAR *);
  283 (* TYPEOF *);
  284 (* CLPAR *);
  285 (* CRPAR *);
  286 (* UNITTYPE *);
  287 (* INTTYPE *);
  288 (* BOOLTYPE *);
  289 (* NONETYPE *);
  290 (* REFTYPE *);
    0|]

let yytransl_block = [|
  258 (* INT *);
  259 (* STRING *);
  260 (* NAME *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\002\000\003\000\003\000\003\000\006\000\
\004\000\004\000\004\000\004\000\008\000\008\000\009\000\009\000\
\009\000\010\000\010\000\010\000\011\000\011\000\011\000\011\000\
\007\000\007\000\007\000\007\000\005\000\005\000\005\000\005\000\
\005\000\000\000"

let yylen = "\002\000\
\002\000\002\000\003\000\001\000\001\000\009\000\005\000\003\000\
\003\000\002\000\004\000\001\000\003\000\001\000\003\000\003\000\
\001\000\003\000\003\000\001\000\004\000\002\000\003\000\001\000\
\006\000\004\000\001\000\003\000\001\000\001\000\001\000\001\000\
\002\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\027\000\000\000\000\000\000\000\000\000\031\000\
\029\000\030\000\032\000\000\000\034\000\000\000\004\000\000\000\
\000\000\012\000\000\000\000\000\020\000\000\000\010\000\000\000\
\022\000\000\000\033\000\001\000\000\000\000\000\005\000\000\000\
\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\009\000\028\000\000\000\000\000\003\000\
\000\000\000\000\023\000\000\000\000\000\000\000\000\000\000\000\
\000\000\018\000\019\000\000\000\000\000\000\000\000\000\026\000\
\011\000\021\000\000\000\000\000\000\000\000\000\000\000\007\000\
\025\000\008\000\000\000\000\000\000\000\006\000"

let yydgoto = "\002\000\
\013\000\014\000\033\000\015\000\016\000\064\000\017\000\018\000\
\019\000\020\000\021\000"

let yysindex = "\008\000\
\037\255\000\000\000\000\247\254\037\255\064\255\037\255\000\000\
\000\000\000\000\000\000\185\255\000\000\063\255\000\000\017\255\
\251\254\000\000\242\254\235\254\000\000\185\255\000\000\010\255\
\000\000\252\254\000\000\000\000\004\255\006\255\000\000\037\255\
\000\000\022\255\043\255\064\255\045\255\037\255\054\255\054\255\
\054\255\054\255\054\255\000\000\000\000\037\255\037\255\000\000\
\037\255\033\255\000\000\037\255\047\255\253\254\038\255\235\254\
\235\254\000\000\000\000\052\255\056\255\077\255\037\255\000\000\
\000\000\000\000\065\255\033\255\033\255\014\255\185\255\000\000\
\000\000\000\000\033\255\082\255\033\255\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\098\255\000\000\174\255\117\255\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\184\255\136\255\
\155\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000"

let yygindex = "\000\000\
\000\000\037\000\000\000\006\000\250\255\137\000\009\000\000\000\
\062\000\040\000\048\000"

let yytablesize = 219
let yytable = "\024\000\
\034\000\042\000\043\000\035\000\039\000\027\000\040\000\041\000\
\001\000\024\000\023\000\036\000\026\000\034\000\025\000\044\000\
\035\000\022\000\003\000\038\000\034\000\045\000\029\000\035\000\
\037\000\030\000\031\000\032\000\046\000\024\000\047\000\036\000\
\054\000\054\000\054\000\054\000\054\000\048\000\003\000\049\000\
\004\000\007\000\074\000\053\000\051\000\050\000\008\000\009\000\
\010\000\011\000\012\000\060\000\061\000\005\000\062\000\003\000\
\006\000\065\000\040\000\041\000\063\000\007\000\052\000\028\000\
\075\000\003\000\008\000\009\000\010\000\011\000\012\000\029\000\
\066\000\006\000\030\000\031\000\032\000\067\000\007\000\056\000\
\057\000\068\000\069\000\008\000\009\000\010\000\011\000\012\000\
\007\000\058\000\059\000\071\000\077\000\008\000\009\000\010\000\
\011\000\012\000\024\000\070\000\055\000\000\000\000\000\024\000\
\000\000\000\000\024\000\000\000\000\000\024\000\024\000\024\000\
\000\000\000\000\000\000\000\000\024\000\017\000\024\000\024\000\
\024\000\024\000\017\000\024\000\000\000\017\000\024\000\000\000\
\017\000\017\000\017\000\000\000\000\000\000\000\000\000\017\000\
\015\000\017\000\017\000\000\000\000\000\015\000\017\000\000\000\
\015\000\017\000\000\000\015\000\015\000\015\000\000\000\000\000\
\000\000\000\000\015\000\016\000\015\000\015\000\000\000\000\000\
\016\000\015\000\000\000\016\000\015\000\000\000\016\000\016\000\
\016\000\000\000\000\000\000\000\000\000\016\000\014\000\016\000\
\016\000\000\000\000\000\014\000\016\000\000\000\014\000\016\000\
\013\000\014\000\014\000\014\000\000\000\013\000\000\000\000\000\
\013\000\000\000\000\000\013\000\013\000\013\000\000\000\014\000\
\000\000\000\000\014\000\000\000\072\000\073\000\000\000\000\000\
\000\000\013\000\000\000\076\000\013\000\078\000\008\000\009\000\
\010\000\011\000\012\000"

let yycheck = "\006\000\
\004\001\023\001\024\001\007\001\019\001\012\000\021\001\022\001\
\001\000\016\000\005\000\015\001\007\000\004\001\006\000\022\000\
\007\001\027\001\002\001\025\001\004\001\026\001\009\001\007\001\
\016\000\012\001\013\001\014\001\025\001\036\000\025\001\015\001\
\039\000\040\000\041\000\042\000\043\000\032\000\002\001\018\001\
\004\001\025\001\029\001\038\000\036\000\003\001\030\001\031\001\
\032\001\033\001\034\001\046\000\047\000\017\001\049\000\002\001\
\020\001\052\000\021\001\022\001\028\001\025\001\018\001\001\001\
\071\000\002\001\030\001\031\001\032\001\033\001\034\001\009\001\
\026\001\020\001\012\001\013\001\014\001\026\001\025\001\040\000\
\041\000\026\001\006\001\030\001\031\001\032\001\033\001\034\001\
\025\001\042\000\043\000\027\001\011\001\030\001\031\001\032\001\
\033\001\034\001\001\001\063\000\039\000\255\255\255\255\006\001\
\255\255\255\255\009\001\255\255\255\255\012\001\013\001\014\001\
\255\255\255\255\255\255\255\255\019\001\001\001\021\001\022\001\
\023\001\024\001\006\001\026\001\255\255\009\001\029\001\255\255\
\012\001\013\001\014\001\255\255\255\255\255\255\255\255\019\001\
\001\001\021\001\022\001\255\255\255\255\006\001\026\001\255\255\
\009\001\029\001\255\255\012\001\013\001\014\001\255\255\255\255\
\255\255\255\255\019\001\001\001\021\001\022\001\255\255\255\255\
\006\001\026\001\255\255\009\001\029\001\255\255\012\001\013\001\
\014\001\255\255\255\255\255\255\255\255\019\001\001\001\021\001\
\022\001\255\255\255\255\006\001\026\001\255\255\009\001\029\001\
\001\001\012\001\013\001\014\001\255\255\006\001\255\255\255\255\
\009\001\255\255\255\255\012\001\013\001\014\001\255\255\026\001\
\255\255\255\255\029\001\255\255\068\000\069\000\255\255\255\255\
\255\255\026\001\255\255\075\000\029\001\077\000\030\001\031\001\
\032\001\033\001\034\001"

let yynames_const = "\
  EOL\000\
  DECL\000\
  IN\000\
  FUN\000\
  CALL\000\
  IF\000\
  THEN\000\
  ELSE\000\
  WHILE\000\
  SKIP\000\
  SEQ\000\
  DEREF\000\
  VAR\000\
  FREE\000\
  ASSIGN\000\
  EQUAL\000\
  NOT\000\
  PLUS\000\
  MINUS\000\
  MULT\000\
  DIV\000\
  LPAR\000\
  RPAR\000\
  TYPEOF\000\
  CLPAR\000\
  CRPAR\000\
  UNITTYPE\000\
  INTTYPE\000\
  BOOLTYPE\000\
  NONETYPE\000\
  REFTYPE\000\
  "

let yynames_block = "\
  INT\000\
  STRING\000\
  NAME\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'statements) in
    Obj.repr(
# 42 "parser.mly"
                 ( _1 )
# 264 "parser.ml"
               : Syntax.calcst))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'statements) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'flowcontrol) in
    Obj.repr(
# 47 "parser.mly"
                           ( Seq(_1,_2) )
# 272 "parser.ml"
               : 'statements))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'statements) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 48 "parser.mly"
                              ( Seq(_1,_3) )
# 280 "parser.ml"
               : 'statements))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 49 "parser.mly"
               ( _1 )
# 287 "parser.ml"
               : 'statements))
; (fun __caml_parser_env ->
    Obj.repr(
# 53 "parser.mly"
        ( Skip )
# 293 "parser.ml"
               : 'flowcontrol))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 6 : 'expression) in
    let _6 = (Parsing.peek_val __caml_parser_env 3 : 'ctype) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'block) in
    let _9 = (Parsing.peek_val __caml_parser_env 0 : 'block) in
    Obj.repr(
# 54 "parser.mly"
                                                          ( If (_3,_7,_9,_6) )
# 303 "parser.ml"
               : 'flowcontrol))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'block) in
    Obj.repr(
# 55 "parser.mly"
                                     ( While (_3,_5) )
# 311 "parser.ml"
               : 'flowcontrol))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'statements) in
    Obj.repr(
# 59 "parser.mly"
                         ( _2 )
# 318 "parser.ml"
               : 'block))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'ctype) in
    Obj.repr(
# 63 "parser.mly"
                      ( Id(_1,_3) )
# 326 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 64 "parser.mly"
                    ( Free (_2) )
# 333 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'ctype) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'factor) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 65 "parser.mly"
                                  ( Assign (_2,_4,_1) )
# 342 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'eq) in
    Obj.repr(
# 66 "parser.mly"
       ( _1 )
# 349 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'sum) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'sum) in
    Obj.repr(
# 70 "parser.mly"
                  ( Eq (_1,_3) )
# 357 "parser.ml"
               : 'eq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'sum) in
    Obj.repr(
# 71 "parser.mly"
        ( _1 )
# 364 "parser.ml"
               : 'eq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'sum) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 75 "parser.mly"
                  ( Add (_1,_3) )
# 372 "parser.ml"
               : 'sum))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'sum) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 76 "parser.mly"
                   ( Sub (_1,_3) )
# 380 "parser.ml"
               : 'sum))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 77 "parser.mly"
         ( _1 )
# 387 "parser.ml"
               : 'sum))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'term) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'op) in
    Obj.repr(
# 81 "parser.mly"
                 ( Mul (_1,_3) )
# 395 "parser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'term) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'op) in
    Obj.repr(
# 82 "parser.mly"
                ( Div (_1,_3) )
# 403 "parser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'op) in
    Obj.repr(
# 83 "parser.mly"
       ( _1 )
# 410 "parser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'factor) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expression) in
    Obj.repr(
# 87 "parser.mly"
                                 ( Call (_1,_3) )
# 418 "parser.ml"
               : 'op))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'factor) in
    Obj.repr(
# 88 "parser.mly"
                  ( Not (_2) )
# 425 "parser.ml"
               : 'op))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'ctype) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'factor) in
    Obj.repr(
# 89 "parser.mly"
                        ( Deref (_3,_1) )
# 433 "parser.ml"
               : 'op))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'factor) in
    Obj.repr(
# 90 "parser.mly"
            ( _1 )
# 440 "parser.ml"
               : 'op))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : 'ctype) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'block) in
    Obj.repr(
# 94 "parser.mly"
                                          ( Decl (_2,_4,_6,_1) )
# 450 "parser.ml"
               : 'factor))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'ctype) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'block) in
    Obj.repr(
# 95 "parser.mly"
                           ( Fun (_3,_1,_4) )
# 459 "parser.ml"
               : 'factor))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 96 "parser.mly"
        ( Number(_1) )
# 466 "parser.ml"
               : 'factor))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expression) in
    Obj.repr(
# 97 "parser.mly"
                         ( _2 )
# 473 "parser.ml"
               : 'factor))
; (fun __caml_parser_env ->
    Obj.repr(
# 101 "parser.mly"
            ( IntType )
# 479 "parser.ml"
               : 'ctype))
; (fun __caml_parser_env ->
    Obj.repr(
# 102 "parser.mly"
             ( BoolType )
# 485 "parser.ml"
               : 'ctype))
; (fun __caml_parser_env ->
    Obj.repr(
# 103 "parser.mly"
            ( UnitType )
# 491 "parser.ml"
               : 'ctype))
; (fun __caml_parser_env ->
    Obj.repr(
# 104 "parser.mly"
            ( None )
# 497 "parser.ml"
               : 'ctype))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'ctype) in
    Obj.repr(
# 105 "parser.mly"
                 ( RefType(_2) )
# 504 "parser.ml"
               : 'ctype))
(* Entry main *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let main (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Syntax.calcst)
