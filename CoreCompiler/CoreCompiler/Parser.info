-----------------------------------------------------------------------------
Info file generated by Happy Version 1.18.10 from Parser.y
-----------------------------------------------------------------------------

state 36 contains 1 shift/reduce conflicts.

-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_parse -> Def                                (0)
	Def -> decl id '=' Def in Def                      (1)
	Def -> fun id ':' Ty '=>' Def                      (2)
	Def -> Exp                                         (3)
	Ty -> Int                                          (4)
	Ty -> Bool                                         (5)
	Ty -> Ref '(' Ty ')'                               (6)
	Ty -> Unit                                         (7)
	Ty -> Ty '->' Ty                                   (8)
	Exp -> Exp '+' Term                                (9)
	Exp -> Exp '-' Term                                (10)
	Exp -> Term                                        (11)
	Term -> Term '*' Factor                            (12)
	Term -> Term '/' Factor                            (13)
	Term -> Factor                                     (14)
	Factor -> num                                      (15)
	Factor -> '(' Def ')'                              (16)
	Factor -> id                                       (17)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	num            { TokenNum $$ }
	'+'            { TokenPlus }
	'-'            { TokenMinus }
	'*'            { TokenMul }
	'/'            { TokenDiv }
	'('            { TokenLParen }
	')'            { TokenRParen }
	decl           { TokenDecl }
	in             { TokenIn }
	'='            { TokenEq }
	id             { TokenId $$ }
	Int            { TokenInt }
	Bool           { TokenBool }
	Ref            { TokenRef }
	Unit           { TokenUnit }
	fun            { TokenFun }
	'->'           { TokenArrow }
	'=>'           { TokenDArrow }
	':'            { TokenColon }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_parse    rule  0
	Def             rules 1, 2, 3
	Ty              rules 4, 5, 6, 7, 8
	Exp             rules 9, 10, 11
	Term            rules 12, 13, 14
	Factor          rules 15, 16, 17

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0


	num            shift, and enter state 7
	'('            shift, and enter state 8
	decl           shift, and enter state 2
	id             shift, and enter state 9
	fun            shift, and enter state 10

	Def            goto state 3
	Exp            goto state 4
	Term           goto state 5
	Factor         goto state 6

State 1


	decl           shift, and enter state 2


State 2

	Def -> decl . id '=' Def in Def                     (rule 1)

	id             shift, and enter state 17


State 3

	%start_parse -> Def .                               (rule 0)

	%eof           accept


State 4

	Def -> Exp .                                        (rule 3)
	Exp -> Exp . '+' Term                               (rule 9)
	Exp -> Exp . '-' Term                               (rule 10)

	'+'            shift, and enter state 15
	'-'            shift, and enter state 16
	')'            reduce using rule 3
	in             reduce using rule 3
	%eof           reduce using rule 3


State 5

	Exp -> Term .                                       (rule 11)
	Term -> Term . '*' Factor                           (rule 12)
	Term -> Term . '/' Factor                           (rule 13)

	'+'            reduce using rule 11
	'-'            reduce using rule 11
	'*'            shift, and enter state 13
	'/'            shift, and enter state 14
	')'            reduce using rule 11
	in             reduce using rule 11
	%eof           reduce using rule 11


State 6

	Term -> Factor .                                    (rule 14)

	'+'            reduce using rule 14
	'-'            reduce using rule 14
	'*'            reduce using rule 14
	'/'            reduce using rule 14
	')'            reduce using rule 14
	in             reduce using rule 14
	%eof           reduce using rule 14


State 7

	Factor -> num .                                     (rule 15)

	'+'            reduce using rule 15
	'-'            reduce using rule 15
	'*'            reduce using rule 15
	'/'            reduce using rule 15
	')'            reduce using rule 15
	in             reduce using rule 15
	%eof           reduce using rule 15


State 8

	Factor -> '(' . Def ')'                             (rule 16)

	num            shift, and enter state 7
	'('            shift, and enter state 8
	decl           shift, and enter state 2
	id             shift, and enter state 9
	fun            shift, and enter state 10

	Def            goto state 12
	Exp            goto state 4
	Term           goto state 5
	Factor         goto state 6

State 9

	Factor -> id .                                      (rule 17)

	'+'            reduce using rule 17
	'-'            reduce using rule 17
	'*'            reduce using rule 17
	'/'            reduce using rule 17
	')'            reduce using rule 17
	in             reduce using rule 17
	%eof           reduce using rule 17


State 10

	Def -> fun . id ':' Ty '=>' Def                     (rule 2)

	id             shift, and enter state 11


State 11

	Def -> fun id . ':' Ty '=>' Def                     (rule 2)

	':'            shift, and enter state 24


State 12

	Factor -> '(' Def . ')'                             (rule 16)

	')'            shift, and enter state 23


State 13

	Term -> Term '*' . Factor                           (rule 12)

	num            shift, and enter state 7
	'('            shift, and enter state 8
	id             shift, and enter state 9

	Factor         goto state 22

State 14

	Term -> Term '/' . Factor                           (rule 13)

	num            shift, and enter state 7
	'('            shift, and enter state 8
	id             shift, and enter state 9

	Factor         goto state 21

State 15

	Exp -> Exp '+' . Term                               (rule 9)

	num            shift, and enter state 7
	'('            shift, and enter state 8
	id             shift, and enter state 9

	Term           goto state 20
	Factor         goto state 6

State 16

	Exp -> Exp '-' . Term                               (rule 10)

	num            shift, and enter state 7
	'('            shift, and enter state 8
	id             shift, and enter state 9

	Term           goto state 19
	Factor         goto state 6

State 17

	Def -> decl id . '=' Def in Def                     (rule 1)

	'='            shift, and enter state 18


State 18

	Def -> decl id '=' . Def in Def                     (rule 1)

	num            shift, and enter state 7
	'('            shift, and enter state 8
	decl           shift, and enter state 2
	id             shift, and enter state 9
	fun            shift, and enter state 10

	Def            goto state 30
	Exp            goto state 4
	Term           goto state 5
	Factor         goto state 6

State 19

	Exp -> Exp '-' Term .                               (rule 10)
	Term -> Term . '*' Factor                           (rule 12)
	Term -> Term . '/' Factor                           (rule 13)

	'+'            reduce using rule 10
	'-'            reduce using rule 10
	'*'            shift, and enter state 13
	'/'            shift, and enter state 14
	')'            reduce using rule 10
	in             reduce using rule 10
	%eof           reduce using rule 10


State 20

	Exp -> Exp '+' Term .                               (rule 9)
	Term -> Term . '*' Factor                           (rule 12)
	Term -> Term . '/' Factor                           (rule 13)

	'+'            reduce using rule 9
	'-'            reduce using rule 9
	'*'            shift, and enter state 13
	'/'            shift, and enter state 14
	')'            reduce using rule 9
	in             reduce using rule 9
	%eof           reduce using rule 9


State 21

	Term -> Term '/' Factor .                           (rule 13)

	'+'            reduce using rule 13
	'-'            reduce using rule 13
	'*'            reduce using rule 13
	'/'            reduce using rule 13
	')'            reduce using rule 13
	in             reduce using rule 13
	%eof           reduce using rule 13


State 22

	Term -> Term '*' Factor .                           (rule 12)

	'+'            reduce using rule 12
	'-'            reduce using rule 12
	'*'            reduce using rule 12
	'/'            reduce using rule 12
	')'            reduce using rule 12
	in             reduce using rule 12
	%eof           reduce using rule 12


State 23

	Factor -> '(' Def ')' .                             (rule 16)

	'+'            reduce using rule 16
	'-'            reduce using rule 16
	'*'            reduce using rule 16
	'/'            reduce using rule 16
	')'            reduce using rule 16
	in             reduce using rule 16
	%eof           reduce using rule 16


State 24

	Def -> fun id ':' . Ty '=>' Def                     (rule 2)

	Int            shift, and enter state 26
	Bool           shift, and enter state 27
	Ref            shift, and enter state 28
	Unit           shift, and enter state 29

	Ty             goto state 25

State 25

	Def -> fun id ':' Ty . '=>' Def                     (rule 2)
	Ty -> Ty . '->' Ty                                  (rule 8)

	'->'           shift, and enter state 33
	'=>'           shift, and enter state 34


State 26

	Ty -> Int .                                         (rule 4)

	')'            reduce using rule 4
	'->'           reduce using rule 4
	'=>'           reduce using rule 4


State 27

	Ty -> Bool .                                        (rule 5)

	')'            reduce using rule 5
	'->'           reduce using rule 5
	'=>'           reduce using rule 5


State 28

	Ty -> Ref . '(' Ty ')'                              (rule 6)

	'('            shift, and enter state 32


State 29

	Ty -> Unit .                                        (rule 7)

	')'            reduce using rule 7
	'->'           reduce using rule 7
	'=>'           reduce using rule 7


State 30

	Def -> decl id '=' Def . in Def                     (rule 1)

	in             shift, and enter state 31


State 31

	Def -> decl id '=' Def in . Def                     (rule 1)

	num            shift, and enter state 7
	'('            shift, and enter state 8
	decl           shift, and enter state 2
	id             shift, and enter state 9
	fun            shift, and enter state 10

	Def            goto state 38
	Exp            goto state 4
	Term           goto state 5
	Factor         goto state 6

State 32

	Ty -> Ref '(' . Ty ')'                              (rule 6)

	Int            shift, and enter state 26
	Bool           shift, and enter state 27
	Ref            shift, and enter state 28
	Unit           shift, and enter state 29

	Ty             goto state 37

State 33

	Ty -> Ty '->' . Ty                                  (rule 8)

	Int            shift, and enter state 26
	Bool           shift, and enter state 27
	Ref            shift, and enter state 28
	Unit           shift, and enter state 29

	Ty             goto state 36

State 34

	Def -> fun id ':' Ty '=>' . Def                     (rule 2)

	num            shift, and enter state 7
	'('            shift, and enter state 8
	decl           shift, and enter state 2
	id             shift, and enter state 9
	fun            shift, and enter state 10

	Def            goto state 35
	Exp            goto state 4
	Term           goto state 5
	Factor         goto state 6

State 35

	Def -> fun id ':' Ty '=>' Def .                     (rule 2)

	')'            reduce using rule 2
	in             reduce using rule 2
	%eof           reduce using rule 2


State 36

	Ty -> Ty . '->' Ty                                  (rule 8)
	Ty -> Ty '->' Ty .                                  (rule 8)

	')'            reduce using rule 8
	'->'           shift, and enter state 33
			(reduce using rule 8)

	'=>'           reduce using rule 8


State 37

	Ty -> Ref '(' Ty . ')'                              (rule 6)
	Ty -> Ty . '->' Ty                                  (rule 8)

	')'            shift, and enter state 39
	'->'           shift, and enter state 33


State 38

	Def -> decl id '=' Def in Def .                     (rule 1)

	')'            reduce using rule 1
	in             reduce using rule 1
	%eof           reduce using rule 1


State 39

	Ty -> Ref '(' Ty ')' .                              (rule 6)

	')'            reduce using rule 6
	'->'           reduce using rule 6
	'=>'           reduce using rule 6


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 18
Number of terminals: 19
Number of non-terminals: 6
Number of states: 40
